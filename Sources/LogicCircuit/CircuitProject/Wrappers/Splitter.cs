// This file is generated by ItemWrapper.Generator. Do not modify this file as it will be regenerated
namespace LogicCircuit {
	using System;
	using System.Collections.Generic;
	using System.Collections.Specialized;
	using System.ComponentModel;
	using System.Diagnostics;
	using System.Globalization;
	using System.Linq;
	using System.Text;
	using System.Xml;
	using LogicCircuit.DataPersistent;

	// Defines the shape of the table Splitter
	internal partial struct SplitterData {
		public Guid SplitterId;
		private int fieldBitWidth;
		public int BitWidth {
			get { return this.fieldBitWidth; }
			set { this.fieldBitWidth = BasePin.CheckBitWidth(value); }
		}
		private int fieldPinCount;
		public int PinCount {
			get { return this.fieldPinCount; }
			set { this.fieldPinCount = BasePin.CheckBitWidth(value); }
		}
		public Rotation Rotation;
		internal Splitter Splitter;

		private interface IFieldSerializer {
			bool NeedToSave(ref SplitterData data);
			string GetTextValue(ref SplitterData data);
			void SetDefault(ref SplitterData data);
			void SetTextValue(ref SplitterData data, string text);
		}

		// Field accessors

		// Accessor of the SplitterId field
		public sealed class SplitterIdField : IField<SplitterData, Guid>, IFieldSerializer {
			public static readonly SplitterIdField Field = new SplitterIdField();
			private SplitterIdField() {}
			public string Name { get { return "SplitterId"; } }
			public int Order { get; set; }
			public Guid DefaultValue { get { return default(Guid); } }
			public Guid GetValue(ref SplitterData record) {
				return record.SplitterId;
			}
			public void SetValue(ref SplitterData record, Guid value) {
				record.SplitterId = value;
			}
			public int Compare(ref SplitterData l, ref SplitterData r) {
				return l.SplitterId.CompareTo(r.SplitterId);
			}
			public int Compare(Guid l, Guid r) {
				return l.CompareTo(r);
			}

			// Implementation of interface IFieldSerializer
			bool IFieldSerializer.NeedToSave(ref SplitterData data) {
				return this.Compare(data.SplitterId, this.DefaultValue) != 0;
			}
			string IFieldSerializer.GetTextValue(ref SplitterData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.SplitterId);
			}
			void IFieldSerializer.SetDefault(ref SplitterData data) {
				data.SplitterId = this.DefaultValue;
			}
			void IFieldSerializer.SetTextValue(ref SplitterData data, string text) {
				data.SplitterId = new Guid(text);
			}
		}

		// Accessor of the BitWidth field
		public sealed class BitWidthField : IField<SplitterData, int>, IFieldSerializer {
			public static readonly BitWidthField Field = new BitWidthField();
			private BitWidthField() {}
			public string Name { get { return "BitWidth"; } }
			public int Order { get; set; }
			public int DefaultValue { get { return default(int); } }
			public int GetValue(ref SplitterData record) {
				return record.BitWidth;
			}
			public void SetValue(ref SplitterData record, int value) {
				record.BitWidth = value;
			}
			public int Compare(ref SplitterData l, ref SplitterData r) {
				return Math.Sign((long)l.BitWidth - (long)r.BitWidth);
			}
			public int Compare(int l, int r) {
				return Math.Sign((long)l - (long)r);
			}

			// Implementation of interface IFieldSerializer
			bool IFieldSerializer.NeedToSave(ref SplitterData data) {
				return this.Compare(data.BitWidth, this.DefaultValue) != 0;
			}
			string IFieldSerializer.GetTextValue(ref SplitterData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.BitWidth);
			}
			void IFieldSerializer.SetDefault(ref SplitterData data) {
				data.BitWidth = this.DefaultValue;
			}
			void IFieldSerializer.SetTextValue(ref SplitterData data, string text) {
				data.BitWidth = int.Parse(text, CultureInfo.InvariantCulture);
			}
		}

		// Accessor of the PinCount field
		public sealed class PinCountField : IField<SplitterData, int>, IFieldSerializer {
			public static readonly PinCountField Field = new PinCountField();
			private PinCountField() {}
			public string Name { get { return "PinCount"; } }
			public int Order { get; set; }
			public int DefaultValue { get { return default(int); } }
			public int GetValue(ref SplitterData record) {
				return record.PinCount;
			}
			public void SetValue(ref SplitterData record, int value) {
				record.PinCount = value;
			}
			public int Compare(ref SplitterData l, ref SplitterData r) {
				return Math.Sign((long)l.PinCount - (long)r.PinCount);
			}
			public int Compare(int l, int r) {
				return Math.Sign((long)l - (long)r);
			}

			// Implementation of interface IFieldSerializer
			bool IFieldSerializer.NeedToSave(ref SplitterData data) {
				return this.Compare(data.PinCount, this.DefaultValue) != 0;
			}
			string IFieldSerializer.GetTextValue(ref SplitterData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.PinCount);
			}
			void IFieldSerializer.SetDefault(ref SplitterData data) {
				data.PinCount = this.DefaultValue;
			}
			void IFieldSerializer.SetTextValue(ref SplitterData data, string text) {
				data.PinCount = int.Parse(text, CultureInfo.InvariantCulture);
			}
		}

		// Accessor of the Rotation field
		public sealed class RotationField : IField<SplitterData, Rotation>, IFieldSerializer {
			public static readonly RotationField Field = new RotationField();
			private RotationField() {}
			public string Name { get { return "Rotation"; } }
			public int Order { get; set; }
			public Rotation DefaultValue { get { return default(Rotation); } }
			public Rotation GetValue(ref SplitterData record) {
				return record.Rotation;
			}
			public void SetValue(ref SplitterData record, Rotation value) {
				record.Rotation = value;
			}
			public int Compare(ref SplitterData l, ref SplitterData r) {
				return l.Rotation.CompareTo(r.Rotation);
			}
			public int Compare(Rotation l, Rotation r) {
				return l.CompareTo(r);
			}

			// Implementation of interface IFieldSerializer
			bool IFieldSerializer.NeedToSave(ref SplitterData data) {
				return this.Compare(data.Rotation, this.DefaultValue) != 0;
			}
			string IFieldSerializer.GetTextValue(ref SplitterData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.Rotation);
			}
			void IFieldSerializer.SetDefault(ref SplitterData data) {
				data.Rotation = this.DefaultValue;
			}
			void IFieldSerializer.SetTextValue(ref SplitterData data, string text) {
				data.Rotation = (Rotation)Enum.Parse(typeof(Rotation), text, true);
			}
		}

		// Special field used to access items wrapper of this record from record.
		// This is used when no other universes is used
		internal sealed class SplitterField : IField<SplitterData, Splitter> {
			public static readonly SplitterField Field = new SplitterField();
			private SplitterField() {}
			public string Name { get { return "SplitterWrapper"; } }
			public int Order { get; set; }
			public Splitter DefaultValue { get { return null; } }
			public Splitter GetValue(ref SplitterData record) {
				return record.Splitter;
			}
			public void SetValue(ref SplitterData record, Splitter value) {
				record.Splitter = value;
			}
			public int Compare(ref SplitterData l, ref SplitterData r) {
				return this.Compare(l.Splitter, r.Splitter);
			}
			public int Compare(Splitter l, Splitter r) {
				if(object.ReferenceEquals(l, r)) return 0;
				if(l == null) return -1;
				if(r == null) return 1;
				return l.SplitterRowId.CompareTo(r.SplitterRowId);
			}
		}

		// Creates table.
		public static TableSnapshot<SplitterData> CreateTable(StoreSnapshot store) {
			TableSnapshot<SplitterData> table = new TableSnapshot<SplitterData>(store, "Splitter"
				,SplitterIdField.Field
				,BitWidthField.Field
				,PinCountField.Field
				,RotationField.Field
				,SplitterField.Field
			);
			// Create all but foreign keys of the table
			table.MakeUnique("PK_Splitter", SplitterData.SplitterIdField.Field , true);
			// Return created table
			return table;
		}

		// Creates all foreign keys of the table
		public static void CreateForeignKeys(StoreSnapshot store) {
			TableSnapshot<SplitterData> table = (TableSnapshot<SplitterData>)store.Table("Splitter");
			table.CreateForeignKey("PK_Splitter", store.Table("Circuit"), SplitterData.SplitterIdField.Field, ForeignKeyAction.Cascade, false);
		}

		// Serializer of the table
		public static void Save(TableSnapshot<SplitterData> table, XmlElement root) {
			XmlDocument xml = root.OwnerDocument;
			foreach(RowId rowId in table.Rows) {
				SplitterData data;
				table.GetData(rowId, out data);
				XmlElement node = xml.CreateElement(root.Prefix, table.Name, root.NamespaceURI);
				root.AppendChild(node);
				foreach(IField<SplitterData> field in table.Fields) {
					IFieldSerializer serializer = field as IFieldSerializer;
					if(serializer != null && serializer.NeedToSave(ref data)) {
						XmlElement e = xml.CreateElement(root.Prefix, field.Name, root.NamespaceURI);
						node.AppendChild(e);
						e.AppendChild(xml.CreateTextNode(serializer.GetTextValue(ref data)));
					}
				}
			}
		}

		public static void Load(TableSnapshot<SplitterData> table, XmlNodeList list, Action<RowId> register) {
			Dictionary<string, IFieldSerializer> field = new Dictionary<string, IFieldSerializer>();
			foreach(IField<SplitterData> f in table.Fields) {
				IFieldSerializer serializer = f as IFieldSerializer;
				if(serializer != null) {
					field.Add(f.Name, serializer);
				}
			}
			foreach(XmlElement node in list) {
				Debug.Assert(node.LocalName == table.Name);
				SplitterData data = new SplitterData();
				foreach(IFieldSerializer serializer in field.Values) {
					serializer.SetDefault(ref data);
				}
				foreach(XmlNode child in node.ChildNodes) {
					XmlElement c = child as XmlElement;
					IFieldSerializer serializer;
					if(c != null && c.NamespaceURI == node.NamespaceURI && field.TryGetValue(c.LocalName, out serializer)) {
						serializer.SetTextValue(ref data, c.InnerText);
					}
				}
				RowId rowId = table.Insert(ref data);
				if(register != null) {
					register(rowId);
				}
			}
		}
	}


	// Class wrapper for a record.
	partial class Splitter : Circuit {

		// RowId of the wrapped record
		internal RowId SplitterRowId { get; private set; }

		// Constructor
		public Splitter(CircuitProject store, RowId rowIdSplitter, RowId rowIdCircuit) : base(store, rowIdCircuit) {
			Debug.Assert(!rowIdSplitter.IsEmpty);
			this.SplitterRowId = rowIdSplitter;
			// Link back to record. Assuming that a transaction is started
			this.Table.SetField(this.SplitterRowId, SplitterData.SplitterField.Field, this);
			this.InitializeSplitter();
		}

		partial void InitializeSplitter();

		// Gets table storing this item.
		private TableSnapshot<SplitterData> Table { get { return this.CircuitProject.SplitterSet.Table; } }


		//Properties of Splitter

		// Gets value of the SplitterId field.
		public Guid SplitterId {
			get { return this.Table.GetField(this.SplitterRowId, SplitterData.SplitterIdField.Field); }
		}

		// Gets or sets value of the BitWidth field.
		public int BitWidth {
			get { return this.Table.GetField(this.SplitterRowId, SplitterData.BitWidthField.Field); }
			set { this.Table.SetField(this.SplitterRowId, SplitterData.BitWidthField.Field, value); }
		}

		// Gets or sets value of the PinCount field.
		public int PinCount {
			get { return this.Table.GetField(this.SplitterRowId, SplitterData.PinCountField.Field); }
			set { this.Table.SetField(this.SplitterRowId, SplitterData.PinCountField.Field, value); }
		}

		// Gets or sets value of the Rotation field.
		public Rotation Rotation {
			get { return this.Table.GetField(this.SplitterRowId, SplitterData.RotationField.Field); }
			set { this.Table.SetField(this.SplitterRowId, SplitterData.RotationField.Field, value); }
		}


		internal void NotifyChanged(TableChange<SplitterData> change) {
			if(this.HasListener) {
				SplitterData oldData, newData;
				change.GetOldData(out oldData);
				change.GetNewData(out newData);
				if(SplitterData.SplitterIdField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("SplitterId");
				}
				if(SplitterData.BitWidthField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("BitWidth");
				}
				if(SplitterData.PinCountField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("PinCount");
				}
				if(SplitterData.RotationField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("Rotation");
				}
			}
			this.OnSplitterChanged();
		}

		partial void OnSplitterChanged();
	}


	// Wrapper for table Splitter.
	partial class SplitterSet : INotifyCollectionChanged, IEnumerable<Splitter> {

		public event NotifyCollectionChangedEventHandler CollectionChanged;

		internal TableSnapshot<SplitterData> Table { get; private set; }

		// Gets StoreSnapshot this set belongs to.
		public CircuitProject CircuitProject { get { return (CircuitProject)this.Table.StoreSnapshot; } }

		// Constructor
		public SplitterSet(CircuitProject store) {
			ITableSnapshot table = store.Table("Splitter");
			if(table != null) {
				Debug.Assert(store.IsFrozen, "The store should be frozen");
				this.Table = (TableSnapshot<SplitterData>)table;
			} else {
				Debug.Assert(!store.IsFrozen, "In order to create table, the store should not be frozen");
				this.Table = SplitterData.CreateTable(store);
			}
			this.InitializeSplitterSet();
		}

		partial void InitializeSplitterSet();

		//internal void Register() {
		//	foreach(RowId rowId in this.Table.Rows) {
		//		this.FindOrCreate(rowId);
		//	}
		//}


		// gets items wrapper by RowId
		public Splitter Find(RowId rowId) {
			if(!rowId.IsEmpty) {
				return this.Table.GetField(rowId, SplitterData.SplitterField.Field);
			}
			return null;
		}

		private void Delete(RowId rowId) {
		}

		// gets items wrapper by RowId
		private IEnumerable<Splitter> Select(IEnumerable<RowId> rows) {
			foreach(RowId rowId in rows) {
				Splitter item = this.Find(rowId);
				Debug.Assert(item != null, "What is the reason for the item not to be found?");
				yield return item;
			}
		}

		// Create wrapper for the row and register it in the dictionary
		private Splitter Create(RowId rowId, RowId CircuitRowId) {
			Splitter item = new Splitter(this.CircuitProject, rowId, CircuitRowId);
			return item;
		}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
		internal Splitter FindOrCreate(RowId rowId) {
			Debug.Assert(!rowId.IsEmpty && !this.Table.IsDeleted(rowId), "Bad RowId");
			Splitter item;
			if((item = this.Find(rowId)) != null) {
				Debug.Assert(!item.IsDeleted(), "Deleted item should not be present in the dictionary");
				return item;
			}
			Guid primaryKeyValue = this.Table.GetField(rowId, SplitterData.SplitterIdField.Field);


			TableSnapshot<CircuitData> tableCircuit = (TableSnapshot<CircuitData>)this.CircuitProject.Table("Circuit");
			return this.Create(rowId, tableCircuit.Find(CircuitData.CircuitIdField.Field, primaryKeyValue));
		}

		// Creates Splitter wrapper
		private Splitter CreateItem(
			// Fields of Splitter table
			Guid SplitterId,
			int BitWidth,
			int PinCount,
			Rotation Rotation
			// Fields of Circuit table

		) {
			TableSnapshot<CircuitData> tableCircuit = (TableSnapshot<CircuitData>)this.CircuitProject.Table("Circuit");
			CircuitData dataCircuit = new CircuitData() {
				CircuitId = SplitterId
			};
			RowId rowIdCircuit = tableCircuit.Insert(ref dataCircuit);

			SplitterData dataSplitter = new SplitterData() {
				SplitterId = SplitterId,
				BitWidth = BitWidth,
				PinCount = PinCount,
				Rotation = Rotation,
			};
			return this.Create(this.Table.Insert(ref dataSplitter), rowIdCircuit);
		}

		// Search helpers

		// Finds Splitter by SplitterId
		public Splitter FindBySplitterId(Guid splitterId) {
			return this.Find(this.Table.Find(SplitterData.SplitterIdField.Field, splitterId));
		}

		public IEnumerator<Splitter> GetEnumerator() {
			return this.Select(this.Table.Rows).GetEnumerator();
		}

		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.GetEnumerator();
		}

		private void NotifyCollectionChanged(NotifyCollectionChangedEventArgs arg) {
			NotifyCollectionChangedEventHandler handler = this.CollectionChanged;
			if(handler != null) {
				handler(this, arg);
			}
		}

		internal List<Splitter> UpdateSet(int oldVersion, int newVersion) {
			IEnumerator<TableChange<SplitterData>> change = this.Table.GetVersionChangeChanges(oldVersion, newVersion);
			if(change != null) {
				bool handlerAttached = (this.CollectionChanged != null);
				List<Splitter> del = (handlerAttached) ? new List<Splitter>() : null;
				while(change.MoveNext()) {
					switch(change.Current.Action) {
					case SnapTableAction.Insert:
						this.FindOrCreate(change.Current.RowId);
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item was not created?");
						break;
					case SnapTableAction.Delete:
						if(handlerAttached) {
							Splitter item = change.Current.GetOldField(SplitterData.SplitterField.Field);
							Debug.Assert(item.IsDeleted());
							del.Add(item);
						}
						break;
					default:
						Debug.Assert(change.Current.Action == SnapTableAction.Update, "Unknown action");
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item does not exist during update?");
						break;
					}
				}
				change.Dispose();
				return del;
			}
			return null;
		}

		internal void NotifyVersionChanged(int oldVersion, int newVersion, List<Splitter> deleted) {
			IEnumerator<TableChange<SplitterData>> change = this.Table.GetVersionChangeChanges(oldVersion, newVersion);
			if(change != null) {
				bool handlerAttached = (this.CollectionChanged != null);
				List<Splitter> add = (handlerAttached) ? new List<Splitter>() : null;
				this.StartNotifySplitterSetChanged(oldVersion, newVersion);
				while(change.MoveNext()) {
					this.NotifySplitterSetChanged(change.Current);
					switch(change.Current.Action) {
					case SnapTableAction.Insert:
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item was not created?");
						if(handlerAttached) {
							add.Add(this.Find(change.Current.RowId));
						}
						break;
					case SnapTableAction.Delete:
						Debug.Assert(change.Current.GetOldField(SplitterData.SplitterField.Field).IsDeleted(), "Why the item still exists?");
						break;
					default:
						Debug.Assert(change.Current.Action == SnapTableAction.Update, "Unknown action");
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item does not exist during update?");
						this.Find(change.Current.RowId).NotifyChanged(change.Current);
						break;
					}
				}
				change.Dispose();
				if(handlerAttached) {
					if(deleted != null && 0 < deleted.Count) {
						this.NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, deleted));
					}
					if(0 < add.Count) {
						this.NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, add));
					}
				}
				this.EndNotifySplitterSetChanged();
			}
		}

		partial void StartNotifySplitterSetChanged(int oldVersion, int newVersion);
		partial void EndNotifySplitterSetChanged();
		partial void NotifySplitterSetChanged(TableChange<SplitterData> change);

		internal void NotifyRolledBack(int version) {
			if(this.Table.WasAffected(version)) {
				IEnumerator<RowId> change = this.Table.GetRolledBackChanges(version);
				if(change != null) {
					while(change.MoveNext()) {
						RowId rowId = change.Current;
						if(this.Table.IsDeleted(rowId)) {
							this.Delete(rowId);
						} else {
							this.FindOrCreate(rowId);
						}
					}
					change.Dispose();
				}
			}
		}
	}

}

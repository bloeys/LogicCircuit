<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorProjectCount" xml:space="preserve">
    <value>More then one project in the file.</value>
  </data>
  <data name="ErrorUnknownVersion" xml:space="preserve">
    <value>Attempt to load an unknown version of Circuit Project.
The file you are trying to open either corrupted or it was created by newer version of Logic Circuit software. Please check http://www.logiccircuit.org/ for newer versions.</value>
  </data>
  <data name="FileFilter" xml:space="preserve">
    <value>Circuit Project (*{0})|*{0}|All files (*.*)|*.*</value>
    <comment>{string fileExtention}</comment>
  </data>
  <data name="FileSaved" xml:space="preserve">
    <value>File {0} saved.</value>
    <comment>{string fileName}</comment>
  </data>
  <data name="FlowDirection" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>LeftToRight or RightToLeft - choose layout direction for your culture.</comment>
  </data>
  <data name="GateAndName" xml:space="preserve">
    <value>And</value>
  </data>
  <data name="GateAndNotation" xml:space="preserve">
    <value>&amp;</value>
  </data>
  <data name="GateAndNotName" xml:space="preserve">
    <value>NAnd</value>
  </data>
  <data name="GateClockName" xml:space="preserve">
    <value>Clock</value>
  </data>
  <data name="GateClockNotation" xml:space="preserve">
    <value>ω</value>
  </data>
  <data name="GateEvenName" xml:space="preserve">
    <value>Even</value>
  </data>
  <data name="GateEvenNotation" xml:space="preserve">
    <value>2k</value>
  </data>
  <data name="GateLedName" xml:space="preserve">
    <value>LED</value>
  </data>
  <data name="GateLedNotation" xml:space="preserve">
    <value>LED</value>
  </data>
  <data name="GateNotName" xml:space="preserve">
    <value>Not</value>
  </data>
  <data name="GateNotNotation" xml:space="preserve">
    <value>~</value>
  </data>
  <data name="GateOddName" xml:space="preserve">
    <value>Odd</value>
  </data>
  <data name="GateOddNotation" xml:space="preserve">
    <value>2k
+1</value>
  </data>
  <data name="GateOrName" xml:space="preserve">
    <value>Or</value>
  </data>
  <data name="GateOrNotation" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="GateOrNotName" xml:space="preserve">
    <value>NOr</value>
  </data>
  <data name="GateProbeName" xml:space="preserve">
    <value>Probe</value>
  </data>
  <data name="GateProbeNotation" xml:space="preserve">
    <value>?</value>
  </data>
  <data name="GateShapeRectangular" xml:space="preserve">
    <value>Rectangular</value>
  </data>
  <data name="GateShapeShaped" xml:space="preserve">
    <value>Shaped</value>
  </data>
  <data name="GateTriStateName" xml:space="preserve">
    <value>Tri-state</value>
  </data>
  <data name="GateTriStateNotation" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="GateXorName" xml:space="preserve">
    <value>Xor</value>
  </data>
  <data name="GateXorNotation" xml:space="preserve">
    <value>=</value>
  </data>
  <data name="GateXorNotName" xml:space="preserve">
    <value>XNor</value>
  </data>
  <data name="Led7Pin1" xml:space="preserve">
    <value>a</value>
  </data>
  <data name="Led7Pin2" xml:space="preserve">
    <value>b</value>
  </data>
  <data name="Led7Pin3" xml:space="preserve">
    <value>c</value>
  </data>
  <data name="Led7Pin4" xml:space="preserve">
    <value>d</value>
  </data>
  <data name="Led7Pin5" xml:space="preserve">
    <value>e</value>
  </data>
  <data name="Led7Pin6" xml:space="preserve">
    <value>f</value>
  </data>
  <data name="Led7Pin7" xml:space="preserve">
    <value>g</value>
  </data>
  <data name="Led7Pin8" xml:space="preserve">
    <value>dot</value>
  </data>
  <data name="LogicalCircuitName" xml:space="preserve">
    <value>Circuit</value>
  </data>
  <data name="MainFrameCaption" xml:space="preserve">
    <value>Logical Circuit {0}</value>
    <comment>{string projectName}</comment>
  </data>
  <data name="MemoryAddressPinName" xml:space="preserve">
    <value>Memory address</value>
  </data>
  <data name="MemoryAddressPinNotation" xml:space="preserve">
    <value>a</value>
  </data>
  <data name="MemoryDataInPinName" xml:space="preserve">
    <value>Memory input data</value>
  </data>
  <data name="MemoryDataPinName" xml:space="preserve">
    <value>Memory data</value>
  </data>
  <data name="MemoryDataPinNotation" xml:space="preserve">
    <value>d</value>
  </data>
  <data name="MemoryWritePinName" xml:space="preserve">
    <value>RAM Write input. Memory value get updated on {0}</value>
    <comment>{string writeOn}</comment>
  </data>
  <data name="MemoryWritePinNotation" xml:space="preserve">
    <value>w</value>
  </data>
  <data name="MessageSaveFile" xml:space="preserve">
    <value>Project {0} has changed.
Do you want to save it?</value>
    <comment>{string projecgName}</comment>
  </data>
  <data name="OperationCanceled" xml:space="preserve">
    <value>Operation canceled.</value>
  </data>
  <data name="PinEnableName" xml:space="preserve">
    <value>E</value>
  </data>
  <data name="PinInName" xml:space="preserve">
    <value>x</value>
  </data>
  <data name="PinName" xml:space="preserve">
    <value>{0}{1}</value>
    <comment>{string prefix, int number}</comment>
  </data>
  <data name="PinOutName" xml:space="preserve">
    <value>q</value>
  </data>
  <data name="Ready" xml:space="preserve">
    <value>Ready.</value>
  </data>
  <data name="SplitterThin1PinName" xml:space="preserve">
    <value>(bit {0}) of Combined Splitter connector</value>
    <comment>{int bit}</comment>
  </data>
  <data name="SplitterThin2PinName" xml:space="preserve">
    <value>(bits {0}-{1}) of Combined Splitter connector</value>
    <comment>{int firstBit, int lastBit}</comment>
  </data>
  <data name="SplitterWidePinName" xml:space="preserve">
    <value>Combined Splitter Connector</value>
  </data>
  <data name="TitleCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="TitleNo" xml:space="preserve">
    <value>_No</value>
  </data>
  <data name="TitleOK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="TitleShowDetails" xml:space="preserve">
    <value>_Show details</value>
  </data>
  <data name="TitleYes" xml:space="preserve">
    <value>_Yes</value>
  </data>
  <data name="WriteOn0" xml:space="preserve">
    <value>failing from 1 to 0</value>
  </data>
  <data name="WriteOn1" xml:space="preserve">
    <value>raising from 0 to 1</value>
  </data>
  <data name="ConstantNotation" xml:space="preserve">
    <value>{0:X}</value>
    <comment>{int constantValue}</comment>
  </data>
  <data name="RAMNotation" xml:space="preserve">
    <value>RAM</value>
  </data>
  <data name="ROMNotation" xml:space="preserve">
    <value>ROM</value>
  </data>
  <data name="ToolTipButton" xml:space="preserve">
    <value>Button {0}</value>
    <comment>{string buttonName}</comment>
  </data>
  <data name="ToolTipConstant" xml:space="preserve">
    <value>{0} bit(s) constant {1:X}</value>
    <comment>{int bitWidth, int value}</comment>
  </data>
  <data name="ToolTipInputPin" xml:space="preserve">
    <value>Input {0} bit(s) Pin {1}</value>
    <comment>{int bitWidth, string pinName}</comment>
  </data>
  <data name="ToolTipNonePin" xml:space="preserve">
    <value>{0} bit(s) {1}</value>
    <comment>{int bitWidth, string pinName}</comment>
  </data>
  <data name="ToolTipOutputPin" xml:space="preserve">
    <value>Output {0} bit(s) Pin {1}</value>
    <comment>{int bitWidth, string pinName}</comment>
  </data>
  <data name="ToolTipRAM" xml:space="preserve">
    <value>RAM {0} bit address / {1} bit data</value>
    <comment>{int address, int data}</comment>
  </data>
  <data name="ToolTipROM" xml:space="preserve">
    <value>ROM {0} bit address / {1} bit data</value>
    <comment>{int address, int data}</comment>
  </data>
  <data name="ToolTipSplitter" xml:space="preserve">
    <value>Splitter of {0} bits to {1} pins</value>
    <comment>{int bitWidth, int pinCount}</comment>
  </data>
  <data name="ToolTipWire" xml:space="preserve">
    <value>Wire</value>
  </data>
  <data name="CategoryBuffer" xml:space="preserve">
    <value>Buffer</value>
  </data>
  <data name="CategoryInputOutput" xml:space="preserve">
    <value>Input - Output</value>
  </data>
  <data name="CategoryMemory" xml:space="preserve">
    <value>Memory</value>
  </data>
  <data name="CategoryParity" xml:space="preserve">
    <value>Parity</value>
  </data>
  <data name="ErrorWrongSplitter" xml:space="preserve">
    <value>Number of pins on the splitter should be less or equal to its bit width.</value>
  </data>
  <data name="TitlePinInput" xml:space="preserve">
    <value>{0}
In</value>
    <comment>{string pinName}</comment>
  </data>
  <data name="TitlePinOutput" xml:space="preserve">
    <value>{0}
Out</value>
    <comment>{string pinName}</comment>
  </data>
  <data name="CommandHelpAbout" xml:space="preserve">
    <value>_About</value>
  </data>
  <data name="NameButton" xml:space="preserve">
    <value>Button</value>
  </data>
  <data name="NameConstant" xml:space="preserve">
    <value>Constant</value>
  </data>
  <data name="NameSplitter" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="TitleAbout" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="TitleApplication" xml:space="preserve">
    <value>Logical Circuit</value>
  </data>
  <data name="TitleVersion" xml:space="preserve">
    <value>Version:</value>
  </data>
  <data name="TitleWeb" xml:space="preserve">
    <value>Web:</value>
  </data>
  <data name="WebSiteUri" xml:space="preserve">
    <value>http://www.logiccircuit.org/</value>
  </data>
  <data name="CommandToolsOptions" xml:space="preserve">
    <value>_Options</value>
  </data>
  <data name="GateShapeRectangular1" xml:space="preserve">
    <value>Rectangular</value>
  </data>
  <data name="GateShapeShaped1" xml:space="preserve">
    <value>Shaped</value>
  </data>
  <data name="TitleDisplayOptions" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="TitleFileOptions" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="TitleGateShape" xml:space="preserve">
    <value>_Gate shape</value>
  </data>
  <data name="TitleLoadLastFile" xml:space="preserve">
    <value>_Load last file on start up</value>
  </data>
  <data name="TitleOptions" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="TitleShowGrid" xml:space="preserve">
    <value>_Show grid</value>
  </data>
  <data name="MessageFreeWireCount" xml:space="preserve">
    <value>{0} free wires have been found.</value>
    <comment>{int wireCount}</comment>
  </data>
  <data name="MessageFloatingSymbolCount" xml:space="preserve">
    <value>{0} unconnected symbols have been found.</value>
    <comment>{int symbolCount}</comment>
  </data>
  <data name="CommandCircuitCurrent" xml:space="preserve">
    <value>Logical Circuit</value>
  </data>
  <data name="CommandCircuitDelete" xml:space="preserve">
    <value>Delete Current Circuit</value>
  </data>
  <data name="CommandCircuitNew" xml:space="preserve">
    <value>New Logical Circuit</value>
  </data>
  <data name="CommandCircuitProject" xml:space="preserve">
    <value>Project</value>
  </data>
  <data name="CommandEditSelectAllButWires" xml:space="preserve">
    <value>Select All But Wires</value>
  </data>
  <data name="CommandEditSelectAllProbes" xml:space="preserve">
    <value>Select All Probes</value>
  </data>
  <data name="CommandEditSelectAllProbesWithWire" xml:space="preserve">
    <value>Select All Probes and Connected Wire</value>
  </data>
  <data name="CommandEditSelectAllWires" xml:space="preserve">
    <value>Select All Wires</value>
  </data>
  <data name="CommandEditSelectFloatingSymbols" xml:space="preserve">
    <value>Select Floating Symbols</value>
  </data>
  <data name="CommandEditSelectFreeWires" xml:space="preserve">
    <value>Select Free Wires</value>
  </data>
  <data name="CommandEditUnselectAllButWires" xml:space="preserve">
    <value>Unselect All But Wires</value>
  </data>
  <data name="CommandEditUnselectAllWires" xml:space="preserve">
    <value>Unselect All Wires</value>
  </data>
  <data name="CommandFileExportImage" xml:space="preserve">
    <value>Export Image</value>
  </data>
  <data name="CommandToolsOscilloscope" xml:space="preserve">
    <value>Oscilloscope</value>
  </data>
  <data name="CommandToolsReport" xml:space="preserve">
    <value>Project Report</value>
  </data>
  <data name="HelpContent" xml:space="preserve">
    <value>http://www.logiccircuit.org/help.html</value>
  </data>
  <data name="TitleCategory" xml:space="preserve">
    <value>_Category:</value>
  </data>
  <data name="TitleDescription" xml:space="preserve">
    <value>_Description:</value>
  </data>
  <data name="TitleName" xml:space="preserve">
    <value>_Name:</value>
  </data>
  <data name="TitleNotation" xml:space="preserve">
    <value>N_otation:</value>
  </data>
  <data name="TitleBitWidth" xml:space="preserve">
    <value>_Bit width:</value>
  </data>
  <data name="TitleValue" xml:space="preserve">
    <value>_Value:</value>
  </data>
  <data name="NamePin" xml:space="preserve">
    <value>Pin</value>
  </data>
  <data name="TitleAddressBitWidth" xml:space="preserve">
    <value>_Address bit width:</value>
  </data>
  <data name="TitleData" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="TitleDataBitWidth" xml:space="preserve">
    <value>_Data bit width:</value>
  </data>
  <data name="TitleInverted" xml:space="preserve">
    <value>_Inverted</value>
  </data>
  <data name="TitleLoad" xml:space="preserve">
    <value>_Load...</value>
  </data>
  <data name="TitleSide" xml:space="preserve">
    <value>_Side:</value>
  </data>
  <data name="TitleType" xml:space="preserve">
    <value>_Type:</value>
  </data>
  <data name="TitleWriteOn" xml:space="preserve">
    <value>_Write on:</value>
  </data>
  <data name="TipOnStartMove" xml:space="preserve">
    <value>Drag &amp; drop the selection at desired location. Hit Esc to cancel the move. Hold Shift when dropping to prevent connected wires move.</value>
  </data>
  <data name="TipOnStartWire" xml:space="preserve">
    <value>Drag end of wire to desired location. Hit Esc to cancel wire creation.</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="TipOnCtrlDown" xml:space="preserve">
    <value>Press Ctrl+{Shift}+Tab to switch between logical circuits or click to select/unselect individual symbols.</value>
  </data>
  <data name="TipOnWireSelect" xml:space="preserve">
    <value>Shift+{Ctrl}+Click on wire to select/unselect entire conductor, Alt+Click on selected wire to split, on common point of two to merge.</value>
  </data>
  <data name="TipOnAwaitingArea" xml:space="preserve">
    <value>{0} {1}. Surround multiple symbols to select them, hold Shift to keep current selection.</value>
    <comment>{string logicCircuit, LogicCircuit.GridPoint point}</comment>
  </data>
  <data name="FunctionParameter" xml:space="preserve">
    <value>Function {0} required at least {1} parameters</value>
    <comment>{string function, int parameterCount}</comment>
  </data>
  <data name="UnknownState" xml:space="preserve">
    <value>State {0} is unknown</value>
    <comment>{LogicCircuit.State state}</comment>
  </data>
  <data name="ErrorDirtyListIsEmpty" xml:space="preserve">
    <value>Attempt to get function from an empty dirty list.</value>
  </data>
  <data name="CircuitMapPathSeparator" xml:space="preserve">
    <value>/</value>
  </data>
  <data name="CircuitMapLabelSeparator" xml:space="preserve">
    <value> on </value>
  </data>
  <data name="ErrorAddressNotConnected" xml:space="preserve">
    <value>Not all address bits connected on memory {0}</value>
    <comment>{string memoryPath}</comment>
  </data>
  <data name="ErrorDataInNotConnected" xml:space="preserve">
    <value>Not all input data bits connected on memory {0}</value>
    <comment>{string memoryPath}</comment>
  </data>
  <data name="ErrorJamBitWidthDifferent" xml:space="preserve">
    <value>Input pin of {0} ({1}) and output pin of {2} ({3}) on {4} have different bit width and cannot be connected. Please resolve the issue.</value>
    <comment>{string symbol1, GridPoint point1, string symbol2, GridPoint point2, string logicCircuit}</comment>
  </data>
  <data name="ErrorLoopInCircuit" xml:space="preserve">
    <value>Symbol of circuit "{0}" on logical circuit "{1}" forms infinite loop. Please resolve the loop.</value>
    <comment>{string symbol, string logicCircuit}</comment>
  </data>
  <data name="ErrorManyResults" xml:space="preserve">
    <value>Input pin {0} of {1} connected to more than one output pin that are not tri state capable.</value>
    <comment>{string pinName, string symbol}</comment>
  </data>
  <data name="PowerOff" xml:space="preserve">
    <value>Power Off</value>
  </data>
  <data name="PowerOn" xml:space="preserve">
    <value>Power On</value>
  </data>
  <data name="ProbeHistoryHex" xml:space="preserve">
    <value>0x{0:X}</value>
    <comment>{int value}</comment>
  </data>
  <data name="ProbeHistoryMark" xml:space="preserve">
    <value>&lt;&lt;&lt;&lt;&lt;&lt; Mark &gt;&gt;&gt;&gt;&gt;&gt;</value>
  </data>
  <data name="TitleMark" xml:space="preserve">
    <value>_Mark</value>
  </data>
  <data name="TitleProbeHistory" xml:space="preserve">
    <value>Probe History</value>
  </data>
  <data name="MessageNotRootConstant" xml:space="preserve">
    <value>Only constants resided on the root circuit ({0}) can be changed when the power is on.</value>
    <comment>{string circuitName}</comment>
  </data>
  <data name="LogicalCircuitMainName" xml:space="preserve">
    <value>Main</value>
  </data>
  <data name="CircuitProjectName" xml:space="preserve">
    <value>Circuit Project</value>
  </data>
  <data name="Oscillation" xml:space="preserve">
    <value>Oscillation</value>
  </data>
  <data name="TitleOscillogram" xml:space="preserve">
    <value>Oscillogram</value>
  </data>
  <data name="TitleOscilloscope" xml:space="preserve">
    <value>Logic Circuit Oscilloscope</value>
  </data>
  <data name="TitleOscilloscoping" xml:space="preserve">
    <value>_Oscilloscoping</value>
  </data>
</root>